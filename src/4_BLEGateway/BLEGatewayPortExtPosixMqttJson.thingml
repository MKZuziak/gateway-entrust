
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "BLEGatewayPorts.thingml"



thing BLEGatewayPortExt_PosixMqttJson_Impl includes BLEGatewayPortExt, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "localext"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	

		do
			//print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:localext?ble_activity action do
			`size_t maxlength = 18;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "device");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.device&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("ble_activity", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:localext?ble_error action do
			`size_t maxlength = 18;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "device");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.device&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("ble_error", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:localext?heartbeat_ble action do
			`size_t maxlength = 20;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "interval");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.interval&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("heartbeat_ble", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:localext?ruuvi_measurement action do
			`size_t maxlength = 220 + strlen(`&e.blemac&`);`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "blemac");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.blemac&`) { result = sprintf(&payload[index],"\"%.*s\"", 220-index, `&e.blemac&`); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "deviceID");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.deviceID&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "humidity");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.humidity&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "temperature");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.temperature&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "pressure");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.pressure&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ax");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.ax&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ay");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.ay&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "az");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.az&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "battery");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.battery&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "rssi");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.rssi&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("ruuvi_measurement", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end



		state Running {}
		
	}
}

