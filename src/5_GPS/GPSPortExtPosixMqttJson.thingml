
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "GPSPorts.thingml"



thing GPSPortExt_PosixMqttJson_Impl includes GPSPortExt, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "localext"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	

		do
			//print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:localext?gps_status action do
			`size_t maxlength = 97;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "status");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.status&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "satellites_visible");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.satellites_visible&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "satellites_used");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.satellites_used&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_status", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:localext?gps_position action do
			`size_t maxlength = 338;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "gpstime");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.gpstime&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "latitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.latitude&`) || isinf(`&e.latitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.latitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "latitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.latitude_err&`) || isinf(`&e.latitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.latitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "longitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.longitude&`) || isinf(`&e.longitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.longitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "longitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.longitude_err&`) || isinf(`&e.longitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.longitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "speed");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.speed&`) || isinf(`&e.speed&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.speed&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "speed_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.speed_err&`) || isinf(`&e.speed_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.speed_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "track");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.track&`) || isinf(`&e.track&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.track&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "track_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.track_err&`) || isinf(`&e.track_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.track_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_position", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:localext?gps_altitude action do
			`size_t maxlength = 172;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "altitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.altitude&`) || isinf(`&e.altitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.altitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "altitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.altitude_err&`) || isinf(`&e.altitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.altitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "vspeed");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.vspeed&`) || isinf(`&e.vspeed&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.vspeed&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "vspeed_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.vspeed_err&`) || isinf(`&e.vspeed_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.vspeed_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_altitude", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end



		state Running {}
		
	}
}

