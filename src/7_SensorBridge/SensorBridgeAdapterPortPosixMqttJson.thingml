
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "SensorBridgeMsgs.thingml"



thing SensorBridgeAdapterPort_PosixMqttJson_Impl includes SensorBridgeAdapterPort, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "fpmqtt"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		subscribe_for_message("set_sensor_rate" as String)
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	
			if (`strcmp(`&msg_name&`, "set_sensor_rate") == 0`) do

		var ___result : Boolean = false
			var ms : UInt16
			var _found_ms : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for set_sensor_rate message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 1) do
				error "JSON ERROR: incomplete payload for set_sensor_rate message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for set_sensor_rate message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for set_sensor_rate message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "ms", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for ms in set_sensor_rate message\n"
					end
					else do
						ms = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_ms = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for set_sensor_rate message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_ms) error "JSON ERROR: Missing ms parameter for message set_sensor_rate\n"

			if(_found_ms) do
				fpmqtt!set_sensor_rate(ms)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message set_sensor_rate because of missing parameters\n"
			end
			return ___result

		end 
		else
		do
			//print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:fpmqtt?front_panel_hwmonitor action do
			`size_t maxlength = 36;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "temp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.temp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "voltage");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.voltage&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("front_panel_hwmonitor", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:fpmqtt?heartbeat_network action do
			`size_t maxlength = 38;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "stable");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.stable&`) { result = sprintf(&payload[index],"%.*s", 38-index, "true"); }`
			`else { result = sprintf(&payload[index],"%.*s", 38-index, "false"); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "interval");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.interval&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("heartbeat_network", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:fpmqtt?adc_values action do
			`size_t maxlength = 58;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a0");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a0&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a1");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a1&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a2");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a2&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a3");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a3&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("adc_values", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end



		state Running {}
		
	}
}

