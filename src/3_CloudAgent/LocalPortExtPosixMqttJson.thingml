
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "CloudAgentMsgs.thingml"



thing LocalPortExt_PosixMqttJson_Impl includes LocalPortExt, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "localext"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		subscribe_for_message("ruuvi_measurement" as String)
		subscribe_for_message("gps_status" as String)
		subscribe_for_message("gps_position" as String)
		subscribe_for_message("gps_altitude" as String)
		subscribe_for_message("adc_values" as String)
		subscribe_for_message("front_panel_hwmonitor" as String)
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	
			if (`strcmp(`&msg_name&`, "ruuvi_measurement") == 0`) do

		var ___result : Boolean = false
			var timestamp : Long
			var _found_timestamp : Boolean = false
			var blemac : String
			var _found_blemac : Boolean = false
			var deviceID : UInt32
			var _found_deviceID : Boolean = false
			var humidity : UInt8
			var _found_humidity : Boolean = false
			var temperature : Int32
			var _found_temperature : Boolean = false
			var pressure : Int32
			var _found_pressure : Boolean = false
			var ax : Int16
			var _found_ax : Boolean = false
			var ay : Int16
			var _found_ay : Boolean = false
			var az : Int16
			var _found_az : Boolean = false
			var battery : UInt16
			var _found_battery : Boolean = false
			var rssi : Int8
			var _found_rssi : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for ruuvi_measurement message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 11) do
				error "JSON ERROR: incomplete payload for ruuvi_measurement message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for ruuvi_measurement message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for ruuvi_measurement message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "timestamp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for timestamp in ruuvi_measurement message\n"
					end
					else do
						timestamp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_timestamp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 6`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "blemac", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 3 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for blemac in ruuvi_measurement message\n"
					end
					else do
						blemac = `malloc(tokens[`& __parse_i+1 &`].end - tokens[`& __parse_i+1 &`].start + 1)`
						if (blemac == `NULL`) do
							error "FATAL: Unable to allocate memory while deserializing JSON message. Exiting."
							`exit(-1);`
						end
						`strncpy ( `&blemac&`, `&payload&` + tokens[`& __parse_i+1 &`].start, tokens[`& __parse_i+1 &`].end - tokens[`& __parse_i+1 &`].start );`
						``&blemac&`[tokens[`& __parse_i+1 &`].end - tokens[`& __parse_i+1 &`].start] = 0;` // NULL termination of the String
						_found_blemac = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 8`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "deviceID", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for deviceID in ruuvi_measurement message\n"
					end
					else do
						deviceID = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_deviceID = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 8`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "humidity", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for humidity in ruuvi_measurement message\n"
					end
					else do
						humidity = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_humidity = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 11`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "temperature", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for temperature in ruuvi_measurement message\n"
					end
					else do
						temperature = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_temperature = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 8`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "pressure", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for pressure in ruuvi_measurement message\n"
					end
					else do
						pressure = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_pressure = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "ax", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for ax in ruuvi_measurement message\n"
					end
					else do
						ax = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_ax = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "ay", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for ay in ruuvi_measurement message\n"
					end
					else do
						ay = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_ay = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "az", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for az in ruuvi_measurement message\n"
					end
					else do
						az = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_az = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 7`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "battery", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for battery in ruuvi_measurement message\n"
					end
					else do
						battery = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_battery = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 4`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "rssi", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for rssi in ruuvi_measurement message\n"
					end
					else do
						rssi = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_rssi = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for ruuvi_measurement message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_timestamp) error "JSON ERROR: Missing timestamp parameter for message ruuvi_measurement\n"
			if (not _found_blemac) error "JSON ERROR: Missing blemac parameter for message ruuvi_measurement\n"
			if (not _found_deviceID) error "JSON ERROR: Missing deviceID parameter for message ruuvi_measurement\n"
			if (not _found_humidity) error "JSON ERROR: Missing humidity parameter for message ruuvi_measurement\n"
			if (not _found_temperature) error "JSON ERROR: Missing temperature parameter for message ruuvi_measurement\n"
			if (not _found_pressure) error "JSON ERROR: Missing pressure parameter for message ruuvi_measurement\n"
			if (not _found_ax) error "JSON ERROR: Missing ax parameter for message ruuvi_measurement\n"
			if (not _found_ay) error "JSON ERROR: Missing ay parameter for message ruuvi_measurement\n"
			if (not _found_az) error "JSON ERROR: Missing az parameter for message ruuvi_measurement\n"
			if (not _found_battery) error "JSON ERROR: Missing battery parameter for message ruuvi_measurement\n"
			if (not _found_rssi) error "JSON ERROR: Missing rssi parameter for message ruuvi_measurement\n"

			if(_found_timestamp and _found_blemac and _found_deviceID and _found_humidity and _found_temperature and _found_pressure and _found_ax and _found_ay and _found_az and _found_battery and _found_rssi) do
				localext!ruuvi_measurement(timestamp, blemac, deviceID, humidity, temperature, pressure, ax, ay, az, battery, rssi)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message ruuvi_measurement because of missing parameters\n"
			end
			if (blemac != `NULL`) `free(`&blemac&`);
`			return ___result

		end 
		else if (`strcmp(`&msg_name&`, "gps_status") == 0`) do

		var ___result : Boolean = false
			var timestamp : Long
			var _found_timestamp : Boolean = false
			var status : UInt8
			var _found_status : Boolean = false
			var satellites_visible : UInt8
			var _found_satellites_visible : Boolean = false
			var satellites_used : UInt8
			var _found_satellites_used : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for gps_status message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 4) do
				error "JSON ERROR: incomplete payload for gps_status message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for gps_status message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for gps_status message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "timestamp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for timestamp in gps_status message\n"
					end
					else do
						timestamp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_timestamp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 6`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "status", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for status in gps_status message\n"
					end
					else do
						status = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_status = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 18`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "satellites_visible", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for satellites_visible in gps_status message\n"
					end
					else do
						satellites_visible = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_satellites_visible = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 15`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "satellites_used", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for satellites_used in gps_status message\n"
					end
					else do
						satellites_used = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_satellites_used = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for gps_status message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_timestamp) error "JSON ERROR: Missing timestamp parameter for message gps_status\n"
			if (not _found_status) error "JSON ERROR: Missing status parameter for message gps_status\n"
			if (not _found_satellites_visible) error "JSON ERROR: Missing satellites_visible parameter for message gps_status\n"
			if (not _found_satellites_used) error "JSON ERROR: Missing satellites_used parameter for message gps_status\n"

			if(_found_timestamp and _found_status and _found_satellites_visible and _found_satellites_used) do
				localext!gps_status(timestamp, status, satellites_visible, satellites_used)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message gps_status because of missing parameters\n"
			end
			return ___result

		end 
		else if (`strcmp(`&msg_name&`, "gps_position") == 0`) do

		var ___result : Boolean = false
			var timestamp : Long
			var _found_timestamp : Boolean = false
			var gpstime : Long
			var _found_gpstime : Boolean = false
			var latitude : Double
			var _found_latitude : Boolean = false
			var latitude_err : Double
			var _found_latitude_err : Boolean = false
			var longitude : Double
			var _found_longitude : Boolean = false
			var longitude_err : Double
			var _found_longitude_err : Boolean = false
			var speed : Double
			var _found_speed : Boolean = false
			var speed_err : Double
			var _found_speed_err : Boolean = false
			var track : Double
			var _found_track : Boolean = false
			var track_err : Double
			var _found_track_err : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for gps_position message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 10) do
				error "JSON ERROR: incomplete payload for gps_position message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for gps_position message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for gps_position message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "timestamp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for timestamp in gps_position message\n"
					end
					else do
						timestamp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_timestamp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 7`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "gpstime", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for gpstime in gps_position message\n"
					end
					else do
						gpstime = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_gpstime = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 8`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "latitude", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for latitude in gps_position message\n"
					end
					else do
						latitude = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_latitude = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 12`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "latitude_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for latitude_err in gps_position message\n"
					end
					else do
						latitude_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_latitude_err = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "longitude", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for longitude in gps_position message\n"
					end
					else do
						longitude = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_longitude = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 13`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "longitude_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for longitude_err in gps_position message\n"
					end
					else do
						longitude_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_longitude_err = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 5`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "speed", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for speed in gps_position message\n"
					end
					else do
						speed = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_speed = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "speed_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for speed_err in gps_position message\n"
					end
					else do
						speed_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_speed_err = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 5`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "track", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for track in gps_position message\n"
					end
					else do
						track = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_track = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "track_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for track_err in gps_position message\n"
					end
					else do
						track_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_track_err = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for gps_position message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_timestamp) error "JSON ERROR: Missing timestamp parameter for message gps_position\n"
			if (not _found_gpstime) error "JSON ERROR: Missing gpstime parameter for message gps_position\n"
			if (not _found_latitude) error "JSON ERROR: Missing latitude parameter for message gps_position\n"
			if (not _found_latitude_err) error "JSON ERROR: Missing latitude_err parameter for message gps_position\n"
			if (not _found_longitude) error "JSON ERROR: Missing longitude parameter for message gps_position\n"
			if (not _found_longitude_err) error "JSON ERROR: Missing longitude_err parameter for message gps_position\n"
			if (not _found_speed) error "JSON ERROR: Missing speed parameter for message gps_position\n"
			if (not _found_speed_err) error "JSON ERROR: Missing speed_err parameter for message gps_position\n"
			if (not _found_track) error "JSON ERROR: Missing track parameter for message gps_position\n"
			if (not _found_track_err) error "JSON ERROR: Missing track_err parameter for message gps_position\n"

			if(_found_timestamp and _found_gpstime and _found_latitude and _found_latitude_err and _found_longitude and _found_longitude_err and _found_speed and _found_speed_err and _found_track and _found_track_err) do
				localext!gps_position(timestamp, gpstime, latitude, latitude_err, longitude, longitude_err, speed, speed_err, track, track_err)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message gps_position because of missing parameters\n"
			end
			return ___result

		end 
		else if (`strcmp(`&msg_name&`, "gps_altitude") == 0`) do

		var ___result : Boolean = false
			var timestamp : Long
			var _found_timestamp : Boolean = false
			var altitude : Double
			var _found_altitude : Boolean = false
			var altitude_err : Double
			var _found_altitude_err : Boolean = false
			var vspeed : Double
			var _found_vspeed : Boolean = false
			var vspeed_err : Double
			var _found_vspeed_err : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for gps_altitude message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 5) do
				error "JSON ERROR: incomplete payload for gps_altitude message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for gps_altitude message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for gps_altitude message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "timestamp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for timestamp in gps_altitude message\n"
					end
					else do
						timestamp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_timestamp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 8`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "altitude", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for altitude in gps_altitude message\n"
					end
					else do
						altitude = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_altitude = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 12`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "altitude_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for altitude_err in gps_altitude message\n"
					end
					else do
						altitude_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_altitude_err = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 6`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "vspeed", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for vspeed in gps_altitude message\n"
					end
					else do
						vspeed = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_vspeed = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 10`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "vspeed_err", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for vspeed_err in gps_altitude message\n"
					end
					else do
						vspeed_err = `strtod(`&payload&` + tokens[`&__parse_i+1&`].start, NULL)`
					_found_vspeed_err = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for gps_altitude message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_timestamp) error "JSON ERROR: Missing timestamp parameter for message gps_altitude\n"
			if (not _found_altitude) error "JSON ERROR: Missing altitude parameter for message gps_altitude\n"
			if (not _found_altitude_err) error "JSON ERROR: Missing altitude_err parameter for message gps_altitude\n"
			if (not _found_vspeed) error "JSON ERROR: Missing vspeed parameter for message gps_altitude\n"
			if (not _found_vspeed_err) error "JSON ERROR: Missing vspeed_err parameter for message gps_altitude\n"

			if(_found_timestamp and _found_altitude and _found_altitude_err and _found_vspeed and _found_vspeed_err) do
				localext!gps_altitude(timestamp, altitude, altitude_err, vspeed, vspeed_err)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message gps_altitude because of missing parameters\n"
			end
			return ___result

		end 
		else if (`strcmp(`&msg_name&`, "adc_values") == 0`) do

		var ___result : Boolean = false
			var a0 : UInt16
			var _found_a0 : Boolean = false
			var a1 : UInt16
			var _found_a1 : Boolean = false
			var a2 : UInt16
			var _found_a2 : Boolean = false
			var a3 : UInt16
			var _found_a3 : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for adc_values message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 4) do
				error "JSON ERROR: incomplete payload for adc_values message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for adc_values message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for adc_values message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "a0", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for a0 in adc_values message\n"
					end
					else do
						a0 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_a0 = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "a1", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for a1 in adc_values message\n"
					end
					else do
						a1 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_a1 = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "a2", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for a2 in adc_values message\n"
					end
					else do
						a2 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_a2 = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 2`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "a3", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for a3 in adc_values message\n"
					end
					else do
						a3 = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_a3 = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for adc_values message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_a0) error "JSON ERROR: Missing a0 parameter for message adc_values\n"
			if (not _found_a1) error "JSON ERROR: Missing a1 parameter for message adc_values\n"
			if (not _found_a2) error "JSON ERROR: Missing a2 parameter for message adc_values\n"
			if (not _found_a3) error "JSON ERROR: Missing a3 parameter for message adc_values\n"

			if(_found_a0 and _found_a1 and _found_a2 and _found_a3) do
				localext!adc_values(a0, a1, a2, a3)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message adc_values because of missing parameters\n"
			end
			return ___result

		end 
		else if (`strcmp(`&msg_name&`, "front_panel_hwmonitor") == 0`) do

		var ___result : Boolean = false
			var temp : Int8
			var _found_temp : Boolean = false
			var voltage : UInt16
			var _found_voltage : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for front_panel_hwmonitor message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 2) do
				error "JSON ERROR: incomplete payload for front_panel_hwmonitor message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for front_panel_hwmonitor message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for front_panel_hwmonitor message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 4`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "temp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for temp in front_panel_hwmonitor message\n"
					end
					else do
						temp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_temp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 7`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "voltage", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for voltage in front_panel_hwmonitor message\n"
					end
					else do
						voltage = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_voltage = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for front_panel_hwmonitor message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_temp) error "JSON ERROR: Missing temp parameter for message front_panel_hwmonitor\n"
			if (not _found_voltage) error "JSON ERROR: Missing voltage parameter for message front_panel_hwmonitor\n"

			if(_found_temp and _found_voltage) do
				localext!front_panel_hwmonitor(temp, voltage)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message front_panel_hwmonitor because of missing parameters\n"
			end
			return ___result

		end 
		else
		do
			//print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)



		state Running {}
		
	}
}

