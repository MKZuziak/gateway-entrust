
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "CloudAgentMsgs.thingml"



thing CloudPortExt_PosixMqttJson_Impl includes CloudPortExt, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	readonly property mqtt_topic_name : String  = "cloudext"
	
	
	function subscribe_for_message(msg_name : String) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_subscribe(`topic`)
	end
	
	function publish_message(msg_name : String, payload: Buffer, size : UInt32) do
		`char topic[256];`
		`snprintf(topic, 256, "%s/%s", `&mqtt_topic_name&`, `&msg_name&`);`
		posixmqtt!mqtt_publish(`topic`, payload, size)
	end
	
	function posixmqtt_subscribe() do
		subscribe_for_message("gateway_heartbeat_ack" as String)
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// Check that this is a message for this port
		`int mqtt_topic_name_length = strlen(`&mqtt_topic_name&`);`
		if (`!(strlen(`&topic&`) > mqtt_topic_name_length+1)`) return false
		if (`strncmp(`&topic&`, `&mqtt_topic_name&`, mqtt_topic_name_length) != 0`) return false
		if (`!(`&topic&`[mqtt_topic_name_length] == '/')`) return false
		
		var msg_name : String = `&`&topic&`[mqtt_topic_name_length+1]`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	
			if (`strcmp(`&msg_name&`, "gateway_heartbeat_ack") == 0`) do

		var ___result : Boolean = false
			var timestamp : Long
			var _found_timestamp : Boolean = false
			var incseq : UInt16
			var _found_incseq : Boolean = false

						
			// Check for parse errors
			if (parse_result < 0) do
				error "JSON ERROR: Parse error for gateway_heartbeat_ack message payload\n"
				return false
			end
			
			// Check that we have room for all parameters (1 object + 2 nodes per parameter)
			if (parse_result < 1 + 2) do
				error "JSON ERROR: incomplete payload for gateway_heartbeat_ack message\n"
				return false
			end
			
			// Check that we have one object as the root 
			if (`tokens[0].type` != 1) do
				error "JSON ERROR: wrong payload format for gateway_heartbeat_ack message\n"
				return false
			end
			
			// parse parameters
			var __parse_i : UInt16 = 1
			while (__parse_i<parse_result-1) do
			
				// We should have an attribute: type == 3 size == 1
				if (`tokens[`&__parse_i&`].type` != 3 or `tokens[`&__parse_i&`].size` != 1) do
					error "JSON ERROR: unexpected token parsing parameters for gateway_heartbeat_ack message\n"
				end
				
				if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 9`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "timestamp", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for timestamp in gateway_heartbeat_ack message\n"
					end
					else do
						timestamp = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_timestamp = true
					end
				end
				else if ( (`(tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start) == 6`) and (`strncmp(`&payload&` + tokens[`&__parse_i&`].start , "incseq", tokens[`&__parse_i&`].end - tokens[`&__parse_i&`].start)` == 0)) do
					// check the type of the parameter
					if (`tokens[`&__parse_i+1&`].type` != 4 or `tokens[`&__parse_i+1&`].size` != 0) do
						error "JSON ERROR: invalid parameters type/value for incseq in gateway_heartbeat_ack message\n"
					end
					else do
						incseq = `strtol(`&payload&` + tokens[`&__parse_i+1&`].start, NULL, 10)`
					_found_incseq = true
					end
				end
				else				
				do
					print "JSON WARNING: got unknown parameters for gateway_heartbeat_ack message\n"
				end
				__parse_i = __parse_i + 2 
			end
			if (not _found_timestamp) error "JSON ERROR: Missing timestamp parameter for message gateway_heartbeat_ack\n"
			if (not _found_incseq) error "JSON ERROR: Missing incseq parameter for message gateway_heartbeat_ack\n"

			if(_found_timestamp and _found_incseq) do
				cloudext!gateway_heartbeat_ack(timestamp, incseq)
				___result = true
			end
			else do
				error "JSON ERROR: Dropping message gateway_heartbeat_ack because of missing parameters\n"
			end
			return ___result

		end 
		else
		do
			//print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:cloudext?gateway_heartbeat action do
			`size_t maxlength = 43;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "seq");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.seq&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gateway_heartbeat", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?gateway_button action do
			`size_t maxlength = 69;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "button_id");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.button_id&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "event_type");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.event_type&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gateway_button", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?ruuvi_measurement action do
			`size_t maxlength = 220 + strlen(`&e.blemac&`);`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "blemac");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.blemac&`) { result = sprintf(&payload[index],"\"%.*s\"", 220-index, `&e.blemac&`); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "deviceID");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.deviceID&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "humidity");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.humidity&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "temperature");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.temperature&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "pressure");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.pressure&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ax");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.ax&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ay");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.ay&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "az");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.az&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "battery");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.battery&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "rssi");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.rssi&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("ruuvi_measurement", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?gps_status action do
			`size_t maxlength = 97;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "status");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.status&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "satellites_visible");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.satellites_visible&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "satellites_used");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.satellites_used&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_status", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?gps_position action do
			`size_t maxlength = 338;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "gpstime");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.gpstime&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "latitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.latitude&`) || isinf(`&e.latitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.latitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "latitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.latitude_err&`) || isinf(`&e.latitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.latitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "longitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.longitude&`) || isinf(`&e.longitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.longitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "longitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.longitude_err&`) || isinf(`&e.longitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.longitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "speed");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.speed&`) || isinf(`&e.speed&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.speed&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "speed_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.speed_err&`) || isinf(`&e.speed_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.speed_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "track");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.track&`) || isinf(`&e.track&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.track&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "track_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.track_err&`) || isinf(`&e.track_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 338-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.track_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_position", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?gps_altitude action do
			`size_t maxlength = 172;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "timestamp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.timestamp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "altitude");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.altitude&`) || isinf(`&e.altitude&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.altitude&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "altitude_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.altitude_err&`) || isinf(`&e.altitude_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.altitude_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "vspeed");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.vspeed&`) || isinf(`&e.vspeed&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.vspeed&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "vspeed_err");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.vspeed_err&`) || isinf(`&e.vspeed_err&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 172-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.vspeed_err&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gps_altitude", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?gateway_psu action do
			`size_t maxlength = 21;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "voltage");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.voltage&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("gateway_psu", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?adc_values action do
			`size_t maxlength = 58;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a0");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a0&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a1");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a1&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a2");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a2&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a3");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.a3&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("adc_values", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end

		internal event e:cloudext?front_panel_hwmonitor action do
			`size_t maxlength = 36;`
			`char * payload = malloc(maxlength);`
			`if(payload == NULL) {`
				`printf("FATAL: ThingML runtime failed to allocate memory serializing message to JSON. Exiting.");`
				`exit(-1);`
			`}`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "temp");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.temp&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "voltage");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.voltage&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			publish_message("front_panel_hwmonitor", `payload` as String, `strlen(payload)` as Integer)
			`free(payload);`
		end



		state Running {}
		
	}
}

